@using Microsoft.AspNetCore.Identity
@using HealthyMe.Areas.Identity.Data
@using Newtonsoft.Json
@model List<HealthyMe.ViewModels.MealViewModel>

@inject UserManager<User> UserManager

<div class="container">
   
    <!-- Separate variable for the selected date -->
    @{
        DateTime selectedDate = DateTime.Now.Date; // Set the default date to today

        // Check if the route data contains a valid date, and update selectedDate if needed
        var routeDate = Context.Request.RouteValues["date"]?.ToString();
        if (!string.IsNullOrEmpty(routeDate) && DateTime.TryParse(routeDate, out var parsedDate))
        {
            selectedDate = parsedDate;
        }
    }

    <div class="alert alert-info m-5" role="alert">
        Hey @UserManager.GetUserAsync(User).Result.FirstName! feel like logging meals today?
    </div>
    <div class = "d-flex flex-row align-items-center justify-content-between mt-5">
        <div> <h3> Calorie Tracker</h3></div>
        <div> <a class="btn btn-primary text-white" asp-area="" asp-controller="FoodSearch" asp-action="Index">Log Food here!</a>
    </div>
    </div>
    <hr />
    <!-- Buttons to navigate to previous or next day -->
    <div class="mt-4 d-flex flex-row align-items-center justify-content-between">
        <div><a class="btn btn-primary" asp-action="Index" asp-controller="CalorieTracker" asp-route-date="@selectedDate.AddDays(-1).ToString("yyyy-MM-dd")">Previous Day</a> </div>
        <form asp-action="Index" asp-controller="CalorieTracker" method="get">
            <div class="form-group">
                <label for="date">Select Date</label>
                <input type="date" id="date" name="date" class="form-control" value="@selectedDate.ToString("yyyy-MM-dd")" />
            </div>
            <button type="submit" class="btn btn-primary">Show Data</button>
        </form>
        <div> <a class="btn btn-primary ml-2" asp-action="Index" asp-controller="CalorieTracker" asp-route-date="@selectedDate.AddDays(1).ToString("yyyy-MM-dd")">Next Day</a></div>
    </div>

    <hr />
    <div class="container mt-4">
        <div class="mb-3">
            <p>Selected Date: @(Model.FirstOrDefault()?.Meal?.date.ToString("yyyy-MM-dd") ?? DateTime.Now.ToString("yyyy-MM-dd"))</p>
        </div>

        @foreach (var mealViewModelGroup in Model.GroupBy(vm => vm.Meal.mealType))
        {
            <div class="mt-4">
               
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Food Name</th>
                                        <th>Calories</th>
                                        <th>Protein</th>
                                        <th>Fat</th>
                                        <th>Carbs</th>
                                        <th>Serving Size</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var mealViewModel in mealViewModelGroup)
                                    {
                                    
                                        foreach (var food in mealViewModel.Foods)
                                        {
                                            <tr>
                                                
                                                <td>@food.FoodName</td>
                                                <td>@food.Calories</td>
                                                <td>@food.Protein</td>
                                                <td>@food.Fat</td>
                                                <td>@food.Carbs</td>
                                                <td>@mealViewModel.MealItems.FirstOrDefault(mi => mi.FdcId == food.FdcId)?.Quantity</td>
                                                <td>
                                                    <a asp-controller="FoodSearch" asp-action="EditFood" asp-route-id="@food.FdcId" class="btn btn-sm btn-primary">Edit</a>
                                                    <a asp-controller="CalorieTracker" asp-action="Delete" asp-route-id="@food.FdcId" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this food item?')">Delete</a>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="mt-3">
                            <p class="font-weight-bold text-success">@mealViewModelGroup.Key Summary</p>
                            <div class="table-responsive">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Total Calories</th>
                                            <th>Total Protein</th>
                                            <th>Total Fat</th>
                                            <th>Total Carbs</th>
                                            
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            
                                            <td>@mealViewModelGroup.SelectMany(vm => vm.Foods).Sum(item => item.Calories)</td>
                                       
                                            
                                            <td>@mealViewModelGroup.SelectMany(vm => vm.Foods).Sum(item => item.Protein)</td>
                                        
                                            
                                            <td>@mealViewModelGroup.SelectMany(vm => vm.Foods).Sum(item => item.Fat)</td>
                                      
                                            
                                            <td>@mealViewModelGroup.SelectMany(vm => vm.Foods).Sum(item => item.Carbs)</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="mt-4">
            <h4>Your Total intake for today!</h4>

            <div class="card mb-4">
                <div class="card-header bg-light">
                    <p class="mb-0">Combined Summary</p>
                </div>

                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Total Calories</th>
                                    <th>Total Protein</th>
                                    <th>Total Fat</th>
                                    <th>Total Carbs</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>@Model.SelectMany(vm => vm.Foods).Sum(item => item.Calories)</td>
                                    <td>@Model.SelectMany(vm => vm.Foods).Sum(item => item.Protein)</td>
                                    <td>@Model.SelectMany(vm => vm.Foods).Sum(item => item.Fat)</td>
                                    <td>@Model.SelectMany(vm => vm.Foods).Sum(item => item.Carbs)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4 p-5 container">
            <h3>Your Macros!</h3>

            <div class="card mb-4">
                <div class="card-header">
                    <p class="mb-0">Combined Summary</p>
                </div>

                <div class="card-body m-auto">
                    <canvas id="macroChart" class="d-block img-fluid"></canvas>
                </div>
            </div>
        </div>

    </div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Assuming Model contains the necessary data
        var model = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings
               {
                   ReferenceLoopHandling = ReferenceLoopHandling.Ignore
               }));
        console.log(model);

        // Calculate sums
        var totalCalories = model.reduce(function (sum, vm) {
            return sum + vm.Foods.reduce(function (foodSum, item) {
                return foodSum + item.Calories;
            }, 0);
        }, 0);

        var totalProtein = model.reduce(function (sum, vm) {
            return sum + vm.Foods.reduce(function (foodSum, item) {
                return foodSum + item.Protein;
            }, 0);
        }, 0);

        var totalFat = model.reduce(function (sum, vm) {
            return sum + vm.Foods.reduce(function (foodSum, item) {
                return foodSum + item.Fat;
            }, 0);
        }, 0);

        var totalCarbs = model.reduce(function (sum, vm) {
            return sum + vm.Foods.reduce(function (foodSum, item) {
                return foodSum + item.Carbs;
            }, 0);
        }, 0);

        // Calculate percentages
        var proteinPercentage = (totalProtein / totalCalories) * 100;
        var fatPercentage = (totalFat / totalCalories) * 100;
        var carbsPercentage = (totalCarbs / totalCalories) * 100;

        var ctx = document.getElementById('macroChart').getContext('2d');

        var macroChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Protein', 'Fat', 'Carbs'],
                datasets: [{
                    data: [totalProtein, totalFat, totalCarbs],
                    backgroundColor: ['#36A2EB', '#FFCE56', '#4CAF50']
                }]
            },
            options: {
                cutoutPercentage: 70, // Adjust the cutout percentage as needed
                responsive: false,
                legend: {
                    display: false
                }
            }
        });
    });

</script>

